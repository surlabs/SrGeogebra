<?php

require_once __DIR__ . "/../vendor/autoload.php";

use srag\Plugins\SrGeogebra\Config\Repository;
use srag\Plugins\SrGeogebra\Utils\SrGeogebraTrait;
//use srag\DIC\SrGeogebra\DICTrait;

/**
 * Class ilSrGeogebraConfigGUI
 *
 * Generated by SrPluginGenerator v1.3.4
 *
 * @author studer + raimann ag - Team Custom 1 <support-custom1@studer-raimann.ch>
 *
 *  * @ilCtrl_IsCalledBy  ilSrGeogebraConfigGUI: ilObjComponentSettingsGUI
 */
class ilSrGeogebraConfigGUI extends ilObjectGUI
{

  //  use DICTrait;
    use SrGeogebraTrait;
    const PLUGIN_CLASS_NAME = ilSrGeogebraPlugin::class;
    const CMD_CONFIGURE = "configure";
    const CMD_UPDATE_CONFIGURE = "updateConfigure";
    const LANG_MODULE = "config";
    const TAB_CONFIGURATION = "configuration";
    private $plugin;


    /**
     * ilSrGeogebraConfigGUI constructor
     */
    public function __construct()
    {
        global $DIC;

        parent::__construct(array(), 0, true, true);

        /** @var ilComponentFactory $component_factory */
        $component_factory = $DIC["component.factory"];
        $this->setPluginObject($component_factory->getPlugin('srgg'));


        //#ILIAS8 Set plugin name in ilObjComponentSettingsGUI
        $this->ctrl->setParameter($this, ilObjComponentSettingsGUI::P_PLUGIN_NAME, 'SrGeogebra');
    }

    /**
     * #ILIAS8 Add Object to setPlugin to fit the current ilObjComponentSettingsGUI implementation
     * @param ilPlugin|null $plugin
     */
    public function setPluginObject(?ilPlugin $plugin): void
    {
        $this->plugin = $plugin;
    }

    /**
     * @return mixed
     */
    public function getPluginObject()
    {
        return $this->plugin;
    }


    /**
     * @inheritDoc
     */
    public function performCommand(/*string*/ $cmd):void
    {
        $this->setTabs();

        $next_class = self::dic()->ctrl()->getNextClass($this);

        switch (strtolower($next_class)) {
            default:
                $cmd = self::dic()->ctrl()->getCmd();

                switch ($cmd) {
                    case self::CMD_CONFIGURE:
                    case self::CMD_UPDATE_CONFIGURE:
                        $this->{$cmd}();
                        break;

                    default:
                        break;
                }
                break;
        }
    }


    /**
     *
     */
    protected function setTabs(): void
    {
        self::dic()->tabs()->addTab(self::TAB_CONFIGURATION, self::plugin()->translate("configuration", self::LANG_MODULE), self::dic()->ctrl()
            ->getLinkTargetByClass(self::class, self::CMD_CONFIGURE));

        self::dic()->locator()->addItem(ilSrGeogebraPlugin::PLUGIN_NAME, self::dic()->ctrl()->getLinkTarget($this, self::CMD_CONFIGURE));
    }


    /**
     *
     */
    protected function configureObject(): void
    {
        global $DIC;
        $DIC->tabs()->activateTab(self::TAB_CONFIGURATION);

        ini_set("xdebug.var_display_max_children", '-1');
        ini_set("xdebug.var_display_max_data", '-1');
        ini_set("xdebug.var_display_max_depth", '-1');

        $form = self::srGeogebra()->config()->factory()->newFormInstance($this);

        $conf_rep = Repository::getInstance();
        $fields = $conf_rep->getFields();


        $tpl = new ilTemplate(
            "tpl.geogebra_config.html",
            false,
            false,
            ilSrGeogebraPlugin::DIRECTORY
        );

        $tpl->setVariable("FORM_ACTION", $form->getFormAction());

        foreach ($fields as $key => $value) {
            $fetched_value = $conf_rep->getValue($key);
            if ($key === "default_alignment" || $key === "appName") {
                $key = $key . "_" . $fetched_value;
                $tpl->setVariable($key, "selected='selected'");
            } else if ($key === "immutable") {
                foreach ($fetched_value as $immutable_key) {
                    $tpl->setVariable("immutable_" . $immutable_key . "_checked", "checked='checked'");
                }
            } else if ($key !== "immutable") {
                if (is_bool($fetched_value)) {
                    if ($fetched_value === true) {
                        $tpl->setVariable($key . "_checked", "checked='checked'");
                    }
                    $fetched_value = intval($fetched_value);
                }
                $tpl->setVariable($key, $fetched_value);
            }
        }

        // Inject language
        $field_language_keys = [
            "default_width",
            "default_height",
            "default_enableShiftDragZoom",
            "default_showResetIcon",
            "default_alignment",
            "appName",
            "borderColor",
            "enableRightClick",
            "enableLabelDrags",
            "showZoomButtons",
            "errorDialogsActive",
            "showMenuBar",
            "showToolBar",
            "showToolBarHelp",
            "showAlgebraInput",
            "language",
            "allowStyleBar",
            "useBrowserForJS",
            "showLogging",
            "capturingThreshold",
            "enable3d",
            "enableCAS",
            "algebraInputPosition",
            "preventFocus",
            "autoHeight",
            "allowUpscale",
            "playButton",
            "scale",
            "showAnimationButton",
            "showFullscreenButton",
            "showSuggestionButtons",
            "showStartTooltip",
            "rounding",
            "buttonShadows",
            "buttonRounding"
        ];

        $tpl->setVariable("configuration", $this->getPluginObject()->txt("configuration"));
        $tpl->setVariable("header_immutable", $this->getPluginObject()->txt("header_immutable"));
        $tpl->setVariable("header_value", $this->getPluginObject()->txt("header_value"));
        $tpl->setVariable("save", $this->getPluginObject()->txt("save"));
        $tpl->setVariable("enableCAS_info", $this->getPluginObject()->txt("enableCAS_info"));
        $tpl->setVariable("enable3d_info", $this->getPluginObject()->txt("enable3d_info"));
        $tpl->setVariable("scale_info", $this->getPluginObject()->txt("scale_info"));

        foreach ($field_language_keys as $field_language_key) {
            $tpl->setVariable("txt_" . $field_language_key, $this->getPluginObject()->txt($field_language_key));
        }

        $DIC->ui()->mainTemplate()->setContent($tpl->get());
    }


    /**
     *
     */
    protected function updateConfigureObject()/*: void*/
    {

        global $DIC;
        $DIC->tabs()->activateTab(self::TAB_CONFIGURATION);
       // self::dic()->tabs()->activateTab(self::TAB_CONFIGURATION);

        $conf_rep = Repository::getInstance();
        $form = self::srGeogebra()->config()->factory()->newFormInstance($this);

        if (!$form->storeForm()) {
            ilUtil::sendFailure(self::plugin()->translate("configuration_failed", self::LANG_MODULE), true);
           // $this->tpl->setOnScreenMessage("success", ilSrGeogebraPlugin::getInstance()->txt("update_successful"), true);
            self::dic()->ctrl()->redirect($this, self::CMD_CONFIGURE);
        }

        foreach ($form->getItems() as $item) {
            if ($item instanceof ilCheckboxInputGUI) {
                $conf_rep->setValue($item->getPostvar(), $item->getChecked());
            } else {
                $conf_rep->setValue($item->getPostvar(), $item->getValue());
            }
        }

        global $tpl, $DIC;
        $this->tpl->setOnScreenMessage("success", $this->plugin->txt("update_successful"), true);
        $DIC->ctrl()->redirect($this, self::CMD_CONFIGURE);
    }
}
